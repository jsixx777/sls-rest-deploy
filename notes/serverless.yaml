
service: who-knows
frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs16.x
  lambdaHashingVersion: 20201221
  stage: ${opt:stage, 'dev'}
  region: us-east-2

functions:
  authorizer:
    handler: authorizer.handler
    environment:
      COGNITO_USERPOOL_ID: !Ref cognitoUserPool
      COGNITO_WEB_CLIENT_ID: !Ref cognitoUserPoolWebClient
    #   AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1

  createNote:
    handler: handler.createNote
    environment: 
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:PutItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: authorizer
  updateNote:
    handler: handler.updateNote
    environment: 
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:UpdateItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: authorizer
  deleteNote:        
    handler: handler.deleteNote
    environment: 
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DeleteItem
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: authorizer
  getAllNotes:        
    handler: handler.getAllNotes
    environment: 
      NOTES_TABLE_NAME: !Ref notesTable
      AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
      Resource: !GetAtt notesTable.Arn
    events:
      - http:
          path: notes
          method: get
          cors: true 
          authorizer: 
            name: userpool_authorizer
            type: COGNITO_USER_POOLS
            arn: !GetAtt cognitoUserPool.Arn 
plugins:
  - serverless-iam-roles-per-function
resources:
 Resources:
  ${file(resources.yaml)}
   